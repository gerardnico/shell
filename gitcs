#!/bin/bash
# Wrapper script around git to perform
# synchronization action
# for combo website repository

CLI_NAME=$(basename "$0") # Name of the cli

function finish() {
  printf "\nScript terminated\n"
}
trap finish EXIT

# Send the message to the log file and the stdout
#
# The log file can be given via the first arg $2
# Default to the variable ${LOG_FILE}
function echo_log() {

  LOCAL_LOG_FILE_PATH=${LOG_FILE}
  if ! ([ -z ${2+x} ]); then
    LOCAL_LOG_FILE_PATH=$2
  fi
  MESSAGE=$1
  echo -e "$MESSAGE" 2>&1 | tee -a ${LOCAL_LOG_FILE_PATH}

}

# Print the error message $1
function echo_err() {
  RED='\033[0;31m'
  NC='\033[0m' # No Color
  #(>&2 echo -e "${RED}$1${NC}")
  echo_log "${RED}$1${NC}"
}

function checkStatus() {
  if [ "$?" -ne 0 ]; then
    echo -e "\nLast command has failed."
    exit 1
  fi
}

# As stated: https://git-scm.com/docs/git-ls-files#Documentation/git-ls-files.txt--t
# for scripting: git status --porcelain
# porcelain means give the output in an easy-to-parse format for scripts
function gitStatus() {
  local vPorcelain
  vPorcelain=$(git status --porcelain)
  if [[ -z $vPorcelain ]]; then
    echo "No modifications"
  else
    # output:
    # for an unstaged file: `status space path`
    # for a staged file: `status space space path`
    echo "$vPorcelain" | while read -r fileStatusLine; do
      # fileStatus=${fileStatusLine:0:1} # not yet used
      fileStatusStaged=${fileStatusLine:1:2}
      if [ "${fileStatusStaged}" == '  ' ]; then
        inNextCommit=' (staged)'
        # filePath=${fileStatusLine:3} # not yet used
      else
        inNextCommit=' (unstaged)'
        # filePath=${fileStatusLine:2} # not yet used
      fi
      echo "$fileStatusLine$inNextCommit"
    done
  fi
}

# Cancel all modifications and start fresh
function gitFresh() {
  git reset --hard
  git clean -f
}

# when there is nothing to commit, they say `working directory clean`
function gitCommit() {

  if [[ -z $1 ]]; then
    echo_err "A message is mandatory for a commit"
    exit 1
  fi
  commitString="GIT_COMMITTER_NAME='beau.bytle.net' GIT_COMMITTER_EMAIL='support@combostrap.com' git commit --author 'Nico <nico@${FQDN}>' -m '$1'"
  eval "$commitString"

}

function gitAutoCommit() {

  # staged all changes
  git add -A

  # commit message
  declare -a files
  for path in $(git diff-index --name-only HEAD); do
    files+=(" ${path##*/}")
  done
  fileList=$(IFS=$', '; echo "${files[*]}")
  message="Update$fileList"
  echo "$message"

  # commit
  gitCommit "$message"

}

function sync() {
  (
    cd /opt/www/bytle/farmer.bytle.net || exit 1
    syncString="animal=${FQDN} php ./bin/plugin.php combo metadata-to-database --host ${FQDN} --port 80 /"
    echo "$syncString"
    eval "$syncString"
  )
}

function gitStatusByFileType() {
  modified=$(git ls-files -m)
  if [[ -n $modified ]]; then
    echo "Modified not in commit: $modified"
  fi
  deleted=$(git ls-files -d)
  if [[ -n $deleted ]]; then
    echo "Deleted: $deleted"
  fi
  untracked=$(git ls-files -o)
  if [[ -n $untracked ]]; then
    echo "Untracked/Added: $untracked"
  fi
  if [[ -z $modified && -z $deleted && -z $untracked ]]; then
    echo "No modifications"
  fi
}

# Directory to checkout may be in a config file
GITCS_CONF=${HOME}/gitcs.csv
if [ -f "$GITCS_CONF" ]; then
  echo "File $GITCS_CONF found"
  IFS=$'\n' read -r -a REPO_DIRS -d $'\c0' <"$GITCS_CONF"
  echo "${#REPO_DIRS[*]} directory found in $GITCS_CONF"
else
  echo "File $GITCS_CONF not found"
fi

# The root directory where all repository may be the children
if [[ -n ${GITCS_HOME+x} ]]; then
  for childPath in "$GITCS_HOME"/*; do
    if [ -d "$childPath" ]; then
      REPO_DIRS+=("$childPath")
    fi
  done
else
  echo "GITCS_HOME environment not found"
fi

if [ ${#REPO_DIRS[*]} == 0 ]; then
  echo_err 'No Git repository directory found'
  exit 1
fi

COMMAND=$1
shift
ARG=$*

if [ -z "$COMMAND" ]; then
  echo_err 'A command is mandatory'
  COMMAND=status
fi

echo
echo "${CLI_NAME^} ${COMMAND^}"
echo "-------------------------------------------"
echo ""
case ${COMMAND} in
status)
  COMMAND_STRING="gitStatus"
  ;;
statusg)
  COMMAND_STRING="git status ${ARG}"
  ;;
commit)
  COMMAND_STRING="gitCommit ${ARG}"
  ;;
auto)
  COMMAND_STRING="gitAutoCommit ${ARG}"
  ;;
commitg)
  COMMAND_STRING="git commit ${ARG}"
  ;;
fresh)
  COMMAND_STRING="gitFresh"
  ;;
sync)
  COMMAND_STRING="sync"
  ;;
*)
  COMMAND_STRING="git ${COMMAND} ${ARG}"
  ;;
esac

for REPO_DIR in "${REPO_DIRS[@]}"; do
  pushd "$REPO_DIR" >/dev/null || checkStatus
  PWD=$(pwd)
  FQDN=${PWD##*/} # the directory name is the FQDN
  echo "* ${FQDN^} ($PWD)"
  if ! (eval "${COMMAND_STRING}"); then
    echo_err "The command ${COMMAND_STRING} has error"
  fi
  echo ""
  popd >/dev/null || checkStatus
done

if [[ ${COMMAND} == 'status' ]]; then
  # As stated: https://git-scm.com/docs/git-ls-files#Documentation/git-ls-files.txt--t
  cat <<EOF
--------------------------------------------------------------
Legend File Status:
A - untracked new file (staged, in next commit)
H - tracked file that is not either unmerged or skip-worktree
S - tracked file that is skip-worktree
M - tracked file that is unmerged (may be or not staged, ie in the next commit)
R - tracked file with unstaged removal/deletion
C - tracked file with unstaged modification/change
K - untracked paths which are part of file/directory conflicts which prevent checking out tracked files
? - untracked file
U - file with resolve-undo information
EOF
fi

# problem between windows and linux path on the conf
# update index
#DOKUWIKI_DIR='../../..'
#DOKUWIKI_HOME="$SCRIPT_DIR/$DOKUWIKI_DIR"
#ANIMALS="combo.nico.lan nico.nico.lan tabulify.nico.lan"
#pushd "$DOKUWIKI_HOME" > /dev/null || checkStatus;
#PWD=$(pwd);
#echo "Current directory: $PWD"
#for ANIMAL in $ANIMALS;
#do
#    echo
#    echo "Animal index $ANIMAL"
#    export animal=ANIMAL
#    /mnt/c/php-7.4.6-Win32-vc15-x64/php.exe ./bin/plugin.php combo metadata-to-database --host serverHostName --port 80 /
#    checkStatus
#done
#popd > /dev/null || checkStatus;
