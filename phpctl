#!/bin/bash
# Control the php-fpm runs

# need the systat package for pidstat
# yum install sysstat -y

CLI_NAME=$(basename "$0") # Name of the cli

function finish() {
  printf "\nScript terminated\n"
}
trap finish EXIT

# Send the message to the log file and the stdout
#
# The log file can be given via the first arg $2
# Default to the variable ${LOG_FILE}
function echo_log() {

  LOCAL_LOG_FILE_PATH=${LOG_FILE}
  if ! [ -z ${2+x} ]; then
    LOCAL_LOG_FILE_PATH=$2
  fi
  MESSAGE=$1
  echo -e "$MESSAGE" 2>&1 | tee -a "${LOCAL_LOG_FILE_PATH}"

}

# Print the error message $1
function echo_err() {
  RED='\033[0;31m'
  NC='\033[0m' # No Color
  #(>&2 echo -e "${RED}$1${NC}")
  echo_log "${RED}$1${NC}"
}

function getStatData() {

  if [ -z "$1" ]; then
    echo_err 'The Pid should be given as first argument for stat data'
    exit 1
  fi
  pid=$1
  # Average
  frequency=1 # in sec
  period=3    # in sec
  averageLine=$(pidstat -p "$pid" -l $frequency $period | grep Average)
  averageCpu=$(echo "$averageLine" | awk '{print $7}' | xargs printf "%.0f")
  averageMemory=$(echo "$averageLine" | awk '{print $6}' | xargs printf "%.0f")
  echo "$averageCpu $averageMemory"
}

function killPhpFpm() {

  if [ -z "$1" ]; then
    echo_err 'The Pid should be given as first argument for stat data'
    exit 1
  fi
  pid=$1

  subject="Php-fpm process $pid killed"
  if [ -n "$2" ]; then
    subject="$subject $2"
  fi

  report=$(infoReport "$pid")
  kill -9 "$pid"
  # note: in cron, the output is send to the user
  # We could therefore not use the mail command
  # but a cron mode
  echo -e "The php-fpm $pid was killed\n$report" | mail -s "$subject" root

}
function statReport() {

  kill='false'
  if [ -n "$1" ]; then
    kill=$1
  fi

  echo "List of $processName processes (kill: $kill)"

  # get the pid of php-fpm processes
  IFS=' ' read -r -a processes <<<"$(pidof "$processName")"
  echo "Total process: ${#processes[*]}"
  for i in "${!processes[@]}"; do
    pid=${processes[$i]}
    read -r averageCpu averageMemory <<<"$(getStatData "$pid")"
    shouldKill=live
    if [[ "$kill" == 'kill' && ($averageCpu -gt 80 || $averageMemory -gt 10) ]]; then
      extraSubject="(Origin: stat, AvgCpu: $averageCpu, AvgMem: $averageMemory)"
      killPhpFpm "$pid" "$extraSubject"
      shouldKill=killed
    fi
    printf "%s - %s - %s - %s - %s\n" "$i" "$pid" "$averageCpu" "$averageMemory" "$shouldKill"
  done

}

function getPhpStatusData() {
  if [ -z "$1" ]; then
    echo_err 'The Pid should be given as first argument'
    exit 1
  fi
  pid=$1
  json=$(curl -s 'http://localhost/php-status?full&json')
  phpStatus=$(echo "$json" | jq --raw-output ".processes[] | select(.pid == $pid)")
  echo "$phpStatus"
}

function listReport() {
  echo " Pid Cpu Mem"
  # -b: Batch mode operation and -n: Number of iterations.
  output=$(top -b -n 1 | grep "$processName" | awk '{print $1,$9,$10}')
  OLD_IFS=$IFS
  IFS=$'\n'
  counter=0
  json=$(curl -s 'http://localhost/php-status?full&json')
  while IFS=" " read -r pid cpu mem; do
    # extract the state and the request uri
    # --raw-output is to delete the quotes of the string created at the end of the jq pipeline with jq string interpolation
    phpStatus=$(echo "$json" | jq --raw-output ".processes[] | select(.pid == $pid) | \"\(.\"state\") \(.\"request uri\")\"")
    read -r state requestUri <<<"$phpStatus"
    cpu=$(printf "%.0f" "$cpu") # to integer
    mem=$(printf "%.0f" "$mem") # to integer
    echo "$pid $cpu $mem $state $requestUri"
    counter=$((counter + 1))
  done <<<"$output"
  IFS=$OLD_IFS
  echo -e "\n$counter processes total"
}

function infoReport() {

  if [ -z "$1" ]; then
    echo_err 'The Pid should be given as first argument'
    exit 1
  fi
  pid=$1
  echo "Info report for the pid $pid"
  # -b: Batch mode operation and -n: Number of iterations.
  read -r cpu mem <<<"$(top -b -n 1 -p "$pid" | awk 'NR>7 {print $9,$10}')"
  cpu=$(printf "%.0f" "$cpu") # to integer
  mem=$(printf "%.0f" "$mem") # to integer
  echo "Cpu Usage: $cpu"
  echo "Memory Usage: $mem"
  echo "Php-fpm data: $(getPhpStatusData "$pid")"

}

function getOsData() {
  # CPU_Util = (user+system+nice+softirq+steal)/ (user+system+nice+softirq+steal+idle+iowait)
  # see also mpstat
  totalCpu=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}' | xargs printf "%.0f")
  # Memory used/total
  totalMemory=$(free -m | awk 'NR==2{print $3/$2*100}' | xargs printf "%.0f")
  echo "$totalCpu" "$totalMemory"
}
function instantOs() {

  read -r totalCpu totalMemory <<<"$(getOsData)"
  echo "Os report:"
  echo "  * Total Cpu: ${totalCpu}%"
  echo "  * Total Memory Usage: $totalMemory%"

}

function monitor() {

  continuous=once
  if [ -n "$1" ]; then
    continuous=$1
  fi
  while :; do

    read -r totalCpu totalMemory <<<"$(getOsData)"

    if [[ $totalMemory -gt 90 ]]; then
      echo "Total Memory critical ($totalMemory), killing"
      statReport 'kill'
    else
      echo "Total Memory ($totalMemory) not critical"
      if [[ $continuous != 'loop' ]]; then
        echo "Not a continuous monitoring ($continuous), break"
        break
      fi
      sleep=5
      echo "  $continuous, sleeping $sleep"
      sleep $sleep
    fi
  done

}

function print_usage() {

  echo ""
  echo "Usage of the cli ${CLI_NAME}"
  echo ""
  echo "   ${CLI_NAME} command"
  echo ""
  echo "where command is one of:"
  echo "     * ls - list the processes"
  echo "     * info \$pid - list the info for the pid \$pid"
  echo "     * kill \$pid [subject]- kill the pid \$pid and send an email to root"
  echo "     * monitor [loop] - monitor the os and kill if necessary (run once or in loop)"
  echo "     * stat [kill] - returns average Cpu and memory over the last 3 seconds. Kill if needed"

  echo ""

}

processName="php-fpm"
COMMAND=$1
shift

if [ -z "$COMMAND" ]; then
  echo 'No command was given, list chosen.'
  COMMAND='ls'
fi

echo
echo "${CLI_NAME^} ${COMMAND^}"
echo "-------------------------------------------"
echo ""
instantOs
echo ""
case ${COMMAND} in
ls)
  listReport
  ;;
list)
  listReport
  ;;
stat)
  statReport "$@"
  ;;
monitor)
  monitor "$@"
  ;;
info)
  infoReport "$@"
  ;;
kill)
  # shellcheck disable=SC2086
  killPhpFpm "$@"
  ;;
help)
  print_usage
  ;;
*)
  echo_err "The command $COMMAND is unknown"
  print_usage
  exit 1
  ;;
esac
