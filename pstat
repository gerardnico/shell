#!/bin/bash

# need the systat package for pidstat
# yum install sysstat -y

CLI_NAME=$(basename "$0") # Name of the cli

function finish() {
  printf "\nScript terminated\n"
}
trap finish EXIT

# Send the message to the log file and the stdout
#
# The log file can be given via the first arg $2
# Default to the variable ${LOG_FILE}
function echo_log() {

  LOCAL_LOG_FILE_PATH=${LOG_FILE}
  if ! ([ -z ${2+x} ]); then
    LOCAL_LOG_FILE_PATH=$2
  fi
  MESSAGE=$1
  echo -e "$MESSAGE" 2>&1 | tee -a ${LOCAL_LOG_FILE_PATH}

}

# Print the error message $1
function echo_err() {
  RED='\033[0;31m'
  NC='\033[0m' # No Color
  #(>&2 echo -e "${RED}$1${NC}")
  echo_log "${RED}$1${NC}"
}

function statReport() {

  processName=$1
  echo "List of $processName processes"

  # Average
  frequency=1 # in sec
  period=1    # in sec

  # get the pid of php-fpm processes
  IFS=' ' read -r -a processes <<<"$(pidof "$processName")"
  echo "Total process: ${#processes[*]}"
  for i in "${!processes[@]}"; do
    pid=${processes[$i]}
    averageLine=$(pidstat -p "$pid" -l $frequency $period | grep Average)
    averageCpu=$(echo "$averageLine" | awk '{print $7}' | xargs printf "%.0f")
    averageMemory=$(echo "$averageLine" | awk '{print $6}' | xargs printf "%.0f")
    shouldKill=live
    if [[ averageCpu -gt 80 ]]; then
      #      kill -9 "$pid"
      shouldKill=killed
    fi
    printf "%s - %s - %s - %s - %s\n" "$i" "$pid" "$averageCpu" "$averageMemory" "$shouldKill"
  done

}

function instantReport() {
  echo " Pid Cpu Mem"
  # -b: Batch mode operation and -n: Number of iterations.
  output=$(top -b -n 1 | grep "$1" | awk '{print $1,$9,$10}')
  OLD_IFS=$IFS
  IFS=$'\n'
  json=$(curl -s 'http://localhost/php-status?full&json');
  echo "$output" | while IFS=" " read -r pid cpu mem; do
    phpStatus=$(echo "$json" | jq --raw-output ".processes[] | select(.pid == $pid) | \"\(.\"state\") \(.\"request uri\")\"")
    read -r state request <<< "$phpStatus"
    echo "$pid $cpu $mem $state $request"
    cpu=$(printf "%.0f" "$cpu") # to integer
    mem=$(printf "%.0f" "$mem") # to integer
    # https://stackoverflow.com/questions/15023540/how-to-determine-which-script-is-being-executed-in-php-fpm-process
  done
  IFS=$OLD_IFS
}

function instantOs() {
  # CPU_Util = (user+system+nice+softirq+steal)/ (user+system+nice+softirq+steal+idle+iowait)
  # see also mpstat
  totalCpu=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')
  echo "Total Cpu: ${totalCpu}"
  free -m | awk 'NR==2{print "Memory Usage: " $3/$2*100 "%"}'
}

#if [ -z ${1+x} ]; then
processName="php-fpm"
#else
#  processName="$1"
#fi

COMMAND=$1
shift

if [ -z "$COMMAND" ]; then
  echo 'No command was given, status chosen.'
  COMMAND=status
fi

echo
echo "${CLI_NAME^} ${COMMAND^}" for $processName
echo "-------------------------------------------"
echo ""
case ${COMMAND} in
instant)
  instantOs
  instantReport $processName
  ;;
stat)
  instantOs
  statReport $processName
  ;;
*)
  echo_err "The command $COMMAND is unknown"
  exit 1
  ;;
esac
